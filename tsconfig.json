{
  "compilerOptions": {
    "target": "esnext", // 指定ECMAScript目标版本'ES3' (默认)
    "module": "esnext", // 指定生成哪个模块系统代码：'commonjs'，'amd'，'system'，或 'umd'或'es2015'。只有'amd'和'system'能和--outFile一起使用。当目标是ES5或以下的时候不能使用'es2015'。
    "moduleResolution": "node", // 决定如何处理模块。或者是'node'对于Node.js/io.js，或者是'classic'（默认）
    "strict": true,
    "noLib": false,// 不包含默认的库文件
    "forceConsistentCasingInFileNames": true, // 不允许不一致包装引用相同的文件。
    "allowSyntheticDefaultImports": true,//允许从没有设置默认导出的模块中默认导入。这并不影响代码的显示，仅为了类型检查。
    "strictFunctionTypes": false,
    "jsx": "preserve",// 在'.tsx'文件里支持JSX：'React' 或 'Preserve'。
    "baseUrl": ".",//解析非相对模块名的基准目录
    "allowJs": true, // 允许编译javascript文件。
    "sourceMap": true, // 生成相应的'.map'文件
    "esModuleInterop": true,// 启用esModuleInterop也会启用allowSyntheticDefaultImports.
    "resolveJsonModule": true,
    "noUnusedLocals": true,// 未使用的常量报告错误
    "noUnusedParameters": true,// 函数中未使用的参数报告错误
    "experimentalDecorators": true,// 启用对装饰器的实验性支持
    "lib": ["dom", "esnext"],//编译过程中需要引入的库文件的列表
    "noImplicitAny": false,
    "skipLibCheck": true,
    "removeComments": true,
    "paths": {
      "/@/*": ["src/*"],
      "/#/*": ["types/*"]
    }
  },
  // 包含的目录
  // * 匹配0或多个字符（不包括目录分隔符）
  // ? 匹配一个任意字符（不包括目录分隔符）
  // **/ 递归匹配任意子目录
  "include": [
    "tests/**/*.ts",
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts",
    "types/**/*.ts",
    "build/**/*.ts",
    "build/**/*.d.ts",
    "mock/**/*.ts",
    "vite.config.ts"
  ],
  // 排除的目录
  "exclude": ["node_modules", "tests/server/**/*.ts", "dist", "**/*.js"]
}
