stages: # 分段
  - repInstall
  - install
  - build
  - deploy

variables:
  BUILDDIR: dist # 打包文件名
  PRODDIR: dist # 线上文件名
  BACKUPDIR: dist_back # 备份文件夹

cache: # 缓存
  paths:
    - node_modules
    - dist

repInstall-job:
  stage: repInstall
  only:
    refs:
      - dev
    changes:
      - package.json
  script:
    - echo "依赖发生变化,开始install🔥🔥🔥"
    - pnpm install
    - echo "完成install🔥🔥🔥"

install-job:
  stage: install
  only:
    refs:
      - dev
  script:
    - echo "开始install🔥🔥🔥"
    - if [ ! -d "./node_modules/" ];then   pnpm install;   else   echo "缓存存在,跳过install"; fi
    - echo "完成install🔥🔥🔥"

build-job:
  stage: build
  only:
    - dev
  script:
    - echo "开始代码打包💪💪💪"
    - npm run build
    - echo "完成代码打包💪💪💪"

deploy-job:
  stage: deploy
  only:
    - dev
  before_script:
    - echo "发射到目标服务器✨✨✨"
  script:
    - echo "发射到目标服务器✨✨✨"
    - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$HOST rm -rf $UPLOADDIR/backup/$BACKUPDIR # 删除原有备份文件(仅在生产环境)
    - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$HOST mv $UPLOADDIR/$PRODDIR/ $UPLOADDIR/backup/$BACKUPDIR/ # 删除原有文件 备份原本的代码(仅在生产环境)
    - sshpass -p $PASSWORD scp -o StrictHostKeyChecking=no -r ./$BUILDDIR/. $USERNAME@$HOST:$UPLOADDIR/dist # 将打包完成的文件复制到目标服务器
    - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$HOST mv $UPLOADDIR/dist $UPLOADDIR/$PRODDIR # 将目标文件改为服务端真正文件
    - echo "完成更新👏👏👏"
  after_script:
    - echo "完成更新👏👏👏"
